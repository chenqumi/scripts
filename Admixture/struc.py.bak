#chenqumi@20170630
#! /usr/bin/env python
# -*- coding: utf-8 -*-
import sys,os,re
import pandas as pd

if len(sys.argv) ==1:
    print("\nUsage: {} <group.info> <Qfiles.lst>".format(sys.argv[0]))
    sys.exit()

GroupInfo,Qfiles = sys.argv[1:3]
#
# =============================================================
def Combine_GroupInfo_Qfiles(GroupInfo,Qfiles):
    # paste GroupInfo all Qfiles > test
    with open(Qfiles) as Q:
    
        cmd_paste = "paste {}".format(GroupInfo)
    
        for line in Q:
            cmd_paste += " {}".format(line.strip())
    
        cmd_paste += " > tmp"
    
    os.system(cmd_paste)

    # cat head tmp > result.Q 
    head = Parse_Qfiles(Qfiles)
    #os.system("echo {} > head".format(head))
    #cmd_cat = "cat {} tmp > result.Q".format(head)
    #os.system("cat head tmp > result.Q")

    with open("result.Q","w") as RQ:
        RQ.write(head+"\n")
        with open ("tmp") as TP:
            for line in TP:
                RQ.write(line)
#
# =============================================================
def Parse_Qfiles(Qfiles):
    with open(Qfiles) as Q:
        
        k_lst = []
        
        for line in Q:
            filename = os.path.basename(line.strip())
            m = re.match(r"\S+\.(\d+)\.Q",filename)
            k_value = m.group(1)
            k_lst.append(int(k_value))

        q_lst = []
        for k in k_lst:
            q = ["K{}_Q{}".format(k,i+1) for i in range(k)]
            q_join = " ".join(q)
            q_lst.append(q_join)

        head = "sample group {}".format(" ".join(q_lst))

        return head


#
# =============================================================
def Parse_DataFrame(df):
    pass
#
# =============================================================
def main():
    # gen result.Q 
    Combine_GroupInfo_Qfiles(GroupInfo,Qfiles)

    # parse_df
    cmd1 = r'df = pd.read_table("result.Q", sep="\s+")'
    cmd2 = r'sortdf = df.sort_values(["group","K4_Q3"])'
    cmd3 = r'sortdf.plot(kind="bar", stacked=True)'
    cmd4 = r'sortdf.to_excel("sort.xlsx")'

    with open ("check_sort_in_pandas.sh","w") as sh:
        sh.write("{}\n{}\n{}\n{}\n".format(cmd1,cmd2,cmd3,cmd4))

#
# =============================================================
if __name__ == '__main__':
    main()