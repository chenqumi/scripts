# GATK pipeline rules

# software
# ===========================
configfile: "config.json"
#BWA = "/lustre/project/og04/shichunwei/biosoft/bwa-0.7.13/bwa"
#GATK = "/p299/user/og03/chenquan1609/Bin/GATK_v3.8/GenomeAnalysisTK.jar"
#ITOOLS = "/p299/user/og06/pipe/pub/baozhigui/biosoft/iTools_Code/iTools"
#JAVA = "/p299/user/og07/baozhigui/reseq/biosoft/jre1.8.0_101/bin/java"
#PICARD = "/p299/user/og06/pipe/pub/baozhigui/biosoft/picard-2.8.0/picard.jar"
#SAMTOOLS = "/lustre/project/og04/shichunwei/biosoft/samtools-1.3/samtools"
#SPLIT = "perl /lustre/project/og03/chenquan1609/test/split.pl"
BWA = config["biosoft"]["bwa"]
GATK = config["biosoft"]["gatk"]
ITOOLS = config["biosoft"]["itools"]
JAVA = config["biosoft"]["java"]
PICARD = config["biosoft"]["picard"]
SAMTOOLS = config["biosoft"]["samtools"]
SPLIT = config["biosoft"]["split"]

#
# ==========================================
samples = config["samples"]
pseudochrom_num = config["pseudochrom_num"]
split_blocks_num = config["split_blocks_num"]
#pseudochroms = config["pseudochroms"]
pseudochroms = ["Chrom{}".format(i+1) for i in range(int(split_blocks_num))]
#split_ref_file = config["split_ref_file"]
split_ref_file = ["{0}/Index/{0}.fa".format(i) for i in  pseudochroms]
gvcf_files = ["{{chrom}}/GVCF/{}.g.vcf".format(i) for i in samples]

# include:
# localrules:
#
# ==========================================
rule GATK_pipe_all:
    input:
        expand("Data/{sample}_R1.fastq.gz", sample = samples),
        expand("Data/{sample}_R2.fastq.gz", sample = samples),
        expand("{chrom}/Index/{chrom}.fa", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.bwt", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.amb", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.ann", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.pac", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.sa", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.fa.fai", chrom = pseudochroms),
        expand("{chrom}/Index/{chrom}.dict", chrom = pseudochroms),
        expand("{chrom}/Align/{sample}.bam", chrom=pseudochroms,sample=samples),
        expand("{chrom}/Sort/{sample}.sort.bam", chrom=pseudochroms,sample=samples),
        expand("{chrom}/MarkDup/{sample}.markdup.bam", chrom=pseudochroms,sample=samples),
        expand("{chrom}/Realign/{sample}.realign.bam", chrom=pseudochroms,sample=samples),
        expand(gvcf_files, chrom=pseudochroms),
        expand("{chrom}/VCF/{chrom}.vcf", chrom=pseudochroms)
        #expand("{chrom}/GVCF/{}".format(gvcf),chrom=pseudochroms)

#
# ==========================================
rule combine_pseudo:
    input:
        "Reference/ref.fa"

    output:
        #"Reference/ref.merge.fa.chrlist",
        #"Reference/ref.merge.fa.gz.chrlist",
        "Reference/ref.merge.fa.merlist",
        merge = "Reference/ref.merge.fa"

    resources:
        qsub_vf = 2000, qsub_p = 2

    shell:
        """
        {ITOOLS} Fatools regenerate -InPut {input} -OutPut {output.merge} \
        -InsertN 500 -NumSeq {pseudochrom_num} -NoOutgz
        """
#
# ==========================================
rule split_ref:
    input:
        "Reference/ref.merge.fa"

    output:
        split_ref_file

    resources:
        qsub_vf = 3000, qsub_p = 2

    shell:
        """
        {SPLIT} {input} {pseudochrom_num} {split_blocks_num} Reference
        """
#
# ==========================================
rule bwa_index:
    input:
        "{chrom}/Index/{chrom}.fa"

    output:
        "{chrom}/Index/{chrom}.fa.amb",
        "{chrom}/Index/{chrom}.fa.ann",
        "{chrom}/Index/{chrom}.fa.bwt",
        "{chrom}/Index/{chrom}.fa.pac",
        "{chrom}/Index/{chrom}.fa.sa"

    resources:
        qsub_vf = 8000, qsub_p = 4

    shell:
        """
        {BWA} index {input}
        """


#
# ==========================================
rule samtools_index:
    input:
        "{chrom}/Index/{chrom}.fa"

    output:
        "{chrom}/Index/{chrom}.fa.fai"

    resources:
        qsub_vf = 5000, qsub_p = 2

    shell:
        """
        {SAMTOOLS} faidx {input}
        """

#
# ==========================================
rule picard_index:
    input:
        "{chrom}/Index/{chrom}.fa"

    output:
        "{chrom}/Index/{chrom}.dict"

    resources:
        qsub_vf = 10000, qsub_p = 2

    shell:
        """
        {JAVA} -Xmx10G -jar {PICARD} CreateSequenceDictionary \
        R={input} O={output}
        """
#
# ==========================================
rule bwa_align:
    input:
        "{chrom}/Index/{chrom}.fa.amb",
        "{chrom}/Index/{chrom}.fa.ann",
        "{chrom}/Index/{chrom}.fa.bwt",
        "{chrom}/Index/{chrom}.fa.pac",
        "{chrom}/Index/{chrom}.fa.sa",
        "{chrom}/Index/{chrom}.dict",
        "{chrom}/Index/{chrom}.fa.fai",

        ref = "{chrom}/Index/{chrom}.fa",
        rd1 = "Data/{sample}_R1.fastq.gz",
        rd2 = "Data/{sample}_R2.fastq.gz"

    output:
        "{chrom}/Align/{sample}.bam"

    resources:
        qsub_vf = 8000, qsub_p = 4

    params:
        "\"@RG\\tID:{sample}\\tLB:{sample}\\tSM:{sample}\\tPL:ILLUMINA\""
    shell:
        """
        {BWA} mem -M -t 8 -k 32 -R {params} {input.ref} {input.rd1} \
        {input.rd2} | {SAMTOOLS} view -bS > {output}
        """
#
# ==========================================
rule bwa_sort:
    input:
        "{chrom}/Align/{sample}.bam"

    output:
        "{chrom}/Sort/{sample}.sort.bam"

    resources:
        qsub_vf = 8000, qsub_p = 4

    shell:
        """
        {SAMTOOLS} sort -o {output} {input}
        """

#
# ==========================================
rule picard_markdup:
    input:
        "{chrom}/Sort/{sample}.sort.bam"

    output:
        markdup = "{chrom}/MarkDup/{sample}.markdup.bam",
        metrics = "{chrom}/MarkDup/{sample}.metrics",
        bai = "{chrom}/MarkDup/{sample}.markdup.bam.bai"

    resources:
        qsub_vf = 40000, qsub_p = 4

    shell:
        """
        {JAVA} -Xmx30G -jar {PICARD} MarkDuplicates \
        MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=4000 \
        INPUT={input} OUTPUT={output.markdup} \
        METRICS_FILE={output.metrics} && \
        {SAMTOOLS} index {output.markdup}
        """
#
# ==========================================
rule gatk_realign:
    input:
        ref = "{chrom}/Index/{chrom}.fa",
        markdup = "{chrom}/MarkDup/{sample}.markdup.bam",

    output:
        intervals = "{chrom}/Realign/{sample}.intervals",
        realign = "{chrom}/Realign/{sample}.realign.bam",

    resources:
        qsub_vf = 40000, qsub_p = 4

    shell:
        """
        {JAVA} -Xmx30G -jar {GATK} -T RealignerTargetCreator -R {input.ref} \
        -I {input.markdup} -o {output.intervals} && \
        {JAVA} -Xmx30G -jar {GATK} -T IndelRealigner -R {input.ref} \
        -I {input.markdup} -targetIntervals {output.intervals} \
        -o {output.realign}
        """
#
# ==========================================
rule gatk_gvcf:
    input:
        ref = "{chrom}/Index/{chrom}.fa",
        realign = "{chrom}/Realign/{sample}.realign.bam",

    output:
        gvcf = "{chrom}/GVCF/{sample}.g.vcf"

    resources:
        qsub_vf = 40000, qsub_p = 4

    shell:
        """
        {JAVA} -Xmx30G -jar {GATK} -T HaplotypeCaller -R {input.ref} \
        -I {input.realign} -o {output.gvcf} -ERC GVCF
        """
#
# ==========================================
rule gatk_vcf:
    input:
        gvcf_files,
        ref = "{chrom}/Index/{chrom}.fa"
        #gvcf = "{chrom}/GVCF/{sample}.g.vcf"
        #lambda wildcards: wildcards.gvcf

    output:
        "{chrom}/VCF/{chrom}.vcf"

    params:
        " ".join(["-V {}".format(i) for i in gvcf_files])

    resources:
        qsub_vf = 40000, qsub_p = 4

    shell:
        """
        {JAVA} -Xmx30G -jar {GATK} -T GenotypeGVCFs -R {input.ref} \
        {params} -o {output}
        """
