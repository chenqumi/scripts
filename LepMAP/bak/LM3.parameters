java -cp /p299/user/og03/chenquan1609/Bin/LepMap3/bin ParentCall2

usage: java ParentCall2 [options] data=file

options:
         data=file          Loads genotype posteriors from a file (- for standard input)
                            Column 1: contig, Column 2: pos
                            Columns 3,...,N+2: pedigree information for lines 1-6, for lines > 6
                            columns 3,...,10*N+2: 10 posteriors for each individual and each genotype combination (AA,AC,..., GT,TT)
         familyLimit=NUM    Required log-odds difference to call a SNP [2.0]
         ZLimit=NUM         Required log-odds difference to call a SNP with Z inheritance [inf]
         XLimit=NUM         Required log-odds difference to call a SNP with X inheritance [inf]
         removeNonInformative=1  Remove markers that are not informative
         ignoreParentOrder=1     Do not care about the order of parental genotypes [not set]
         outputParentPosterior=1  Outputs the genotype posteriors for the parents as well[not set]
         halfSibs=1              Look for identical parent names for half-sib parental genotype inference[not set]
         vcfFile=file            Read posteriors from a vcf file
         posteriorFile=file      Read posteriors from a text file

#=====================================================================================================================================

java -cp /p299/user/og03/chenquan1609/Bin/LepMap3/bin SeparateChromosomes2 

usage: java SeparateChromosomes2 [options] data=file >map.txt
options:
         data=file          Loads genotype posteriors from a file (- for standard input)
                            Column 1: contig, Column 2: pos
                            Columns 3,...,N+2: pedigree information for lines 1-6, for lines > 6
                            Columns 3,...,10*N+2: 10 posteriors for each individual and each genotype combination (AA,AC,..., GT,TT)
         lodLimit=NUM       LOD score limit [10.0]
         informativeMask=STR     Use only markers with informative father (1), mother(2), both parents(3) or neither parent(0) [0123]
         theta=NUM          Fixed recombination fraction [0.03]
         (fe)maleTheta=NUM  Fixed recombination fraction separately for both sex [theta]
         sizeLimit=NUM      Remove LGs with < NUM markers [1]
         numThreads=NUM     Use maximum of NUM threads [1]
         subsample=NUM      Use only a random NUM fraction of data [1]
         lod3Mode=NUM       Controls how LOD scores are computed between double informative markers [1]
                            1: haplotypes match (4 alleles, max LOD = log(4^n)
                            2: homozygotes match (3 alleles, max LOD = log(3^n))
                            3: homozygotes or heterozygotes match (2 alleles, max LOD = log(2^n))
         distortionLod=1    Use segregation distortion aware LOD scores [not set]
         map=file           refine linkage group lg of map file
         lg=NUM             refine linkage group lg [1 if map is provided]


#=====================================================================================================================================

java -cp /p299/user/og03/chenquan1609/Bin/LepMap3/bin OrderMarkers2 

usage: java OrderMarkers2 [options] data=file.posterior
         data=file          Loads genotype posteriors from a file (- for standard input)
                            Column 1: contig, Column 2: pos
                            Columns 3,...,N+2: pedigree information for lines 1-6, for lines > 6
                            Columns 3,...,10*N+2: 10 posteriors for each individual and each genotype combination (AA,AC,..., GT,TT)
         map=chromosome_map_file LG map file. Typically generated by SeparateChromosomes2 or JoinSingles2.
         evaluateOrder=order.txt Load initial marker order from a file
         informativeMask=STR     Use only markers with informative father (1), mother(2), both parents(3) or neither parent(0) [0123]
         useMorgan=1        Use Morgan (linear) mapping function
         useKosambi=1       Use Kosambi mapping function
         improveOrder=0     Do not improve the order (used to only (re)evaluate a order)
         numThreads=NUM     Use NUM threads [1]
         numThreads=NUM     Use NUM threads [1]
         numMergeIterations=NUM  Run NUM iterations [6]
         chromosome=NUM     Order chromosome NUM only [all]
         scale=NUM NUM2     Scale posteriors by NUM (p -> p^NUM) with a maximum of NUM2 (>=NUM) times map 'end effect' correction [M/N 2]
                            , where N is number of markers and M number of individuals (e.g. 3M/N 3, 100/N 3)
         scale=NUM          Scale posteriors "NUM 2"
         minError=NUM       Set minimum posterior value [0.001]
         outputPhasedData=1 Output phased data
         outputPhasedData=2 Output phased data but mask uncertain haplotypes
         removeMarkers=m1 [ m2 m3 ...]  Remove markers
         sexAveraged=1      Calculate sex-averaged map distances
         phasedData=1       Input data is phased
         grandparentPhase=1 Use grandparents to phase data, removes markers that cannot be phased
         recombination1=NUM Recombination rate for male [0.001]
         recombination2=NUM Recombination rate for female [0.001]
         interference1=NUM  Recombination interference for male [0.001]
         interference2=NUM  Recombination interference for female [0.001]
         identicalLimit=NUM Reduce the number of markers (conditional on the order). 
                            If the absolute probability difference between markers is < NUM they are collapsed [0.01]
         computeLODScores=file   Evaluate pair-wise LOD scores and store to file
         calculateIntervals=file [NUM=1] Evaluate and store to a file the interval(s) for each marker where it could be located
                             within NUM likelihood treshold. Useful for matching physical and linkage postions of markers
         randomPhase=1      Start the phasing algorithm from a random phase configuration.
                            Useful if the phasing does not converge properly with evaluateOrder